{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Samsung\\\\OneDrive\\\\Desktop\\\\Mariano Crop Farm Frontend\\\\marianocropfarmbot\\\\src\\\\components\\\\CalculateNums.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { selectUser } from '../features/userSlice';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setCalculated } from '../features/calculateSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CalculateNums = () => {\n  _s();\n  const dispatch = useDispatch();\n  const user = useSelector(selectUser);\n  const [waiting, setWaiting] = useState(true);\n  const [mined, setMined] = useState(0);\n  const [remainingTime, setRemainingTime] = useState({\n    hours: 6,\n    minutes: 0,\n    seconds: 0\n  });\n  const [progress, setProgress] = useState(0);\n  const [canClaim, setCanClaim] = useState(false);\n  const MAX_MINE_RATE = 100.0;\n  const calculateProgress = miningStartedTime => {\n    if (!miningStartedTime) return 0;\n    const now = Date.now();\n    const totalMiningTime = 6 * 60 * 60 * 1000;\n    const elapsedTime = now - miningStartedTime;\n    if (elapsedTime >= totalMiningTime) {\n      setCanClaim(true);\n      return 100;\n    }\n    const progress = elapsedTime / totalMiningTime * 100;\n    return Math.min(Math.max(progress, 0), 100);\n  };\n  const calculateMinedValue = (miningStartedTime, mineRate) => {\n    if (!miningStartedTime || !mineRate) return 0;\n    const now = Date.now();\n    const totalMiningTime = 6 * 60 * 60 * 1000;\n    let elapsedTime = now - miningStartedTime;\n    elapsedTime = Math.round(elapsedTime / 1000) * 1000;\n    if (elapsedTime >= totalMiningTime) {\n      return mineRate * (totalMiningTime / 1000);\n    }\n    const minedValue = mineRate * (elapsedTime / 1000);\n    return Math.round(minedValue * 1000) / 1000;\n  };\n  const calculateRemainingTime = miningStartedTime => {\n    if (!miningStartedTime) {\n      return {\n        hours: 6,\n        minutes: 0,\n        seconds: 0\n      };\n    }\n    const now = Date.now();\n    const totalMiningTime = 6 * 60 * 60 * 1000;\n    const endTime = miningStartedTime + totalMiningTime;\n    const remainingTime = Math.max(endTime - now, 0);\n    if (remainingTime === 0) {\n      return {\n        hours: 0,\n        minutes: 0,\n        seconds: 0\n      };\n    }\n    const hours = Math.floor(remainingTime / (60 * 60 * 1000));\n    const minutes = Math.floor(remainingTime % (60 * 60 * 1000) / (60 * 1000));\n    const seconds = Math.floor(remainingTime % (60 * 1000) / 1000);\n    return {\n      hours,\n      minutes,\n      seconds\n    };\n  };\n  const addPrecise = (a, b) => {\n    return parseFloat((a + b).toFixed(3));\n  };\n  const getUpgradeStep = rate => {\n    if (rate < 0.01) return 0.001;\n    if (rate < 0.1) return 0.01;\n    if (rate < 1) return 0.1;\n    return Math.pow(10, Math.floor(Math.log10(rate)));\n  };\n  const getUpgradePrice = nextRate => {\n    return nextRate * 100000;\n  };\n  const getNextUpgradeRate = () => {\n    const step = getUpgradeStep(user.mineRate);\n    return Math.min(addPrecise(user.mineRate, step), MAX_MINE_RATE);\n  };\n  const canUpgrade = user.balance >= getUpgradePrice(getNextUpgradeRate()) && user.mineRate < MAX_MINE_RATE;\n  useEffect(() => {\n    let worker = null;\n    const updateFunction = () => {\n      const updateProgress = () => {\n        const currentProgress = calculateProgress(user.miningStartedTime);\n        setProgress(currentProgress);\n      };\n      const updatedMinedValue = () => {\n        const currentMinedValue = calculateMinedValue(user.miningStartedTime, user.mineRate);\n        setMined(currentMinedValue);\n        setWaiting(false);\n      };\n      const updateRemainingTime = () => {\n        const timeLeft = calculateRemainingTime(user.miningStartedTime);\n        setRemainingTime(timeLeft);\n        if (timeLeft.hours === 0 && timeLeft.minutes === 0 && timeLeft.seconds === 0) {\n          setRemainingTime({\n            hours: 0,\n            minutes: 0,\n            seconds: 0\n          });\n        }\n      };\n      updateProgress();\n      updateMinedValue();\n      updateRemainingTime();\n    };\n    if (user.isMining && user.miningStartedTime) {\n      const workerCode = `\n                    let interval = null\n                    self.onmessage = function(e) {\n                        if (e.data === 'start) {\n                            interval = setInterval(() => {\n                                self.postMessage('tick');\n                            }, 1000);\n                        } else if (e.data === 'stop') {\n                            clearInterval(interval);\n                        }\n                    };\n                `;\n      const blob = new Blob([workerCode], {\n        type: \"application/javascript\"\n      });\n      worker = new Worker(URL, createObjectURL(blob));\n      worker.onmessage = updateFunction;\n      worker.postMessage(\"start\");\n    } else {\n      setProgress(0);\n      setMined(0);\n      setRemainingTime({\n        hours: 6,\n        minutes: 0,\n        seconds: 0\n      });\n      setCanClaim(false);\n      setWaiting(false);\n    }\n    return () => {\n      if (worker) {\n        worker.postMessage(\"stop\");\n        worker.terminate();\n      }\n    };\n  }, [user.isMining, user.miningStartedTime, user.mineRate]);\n  useEffect(() => {\n    if (!waiting) {\n      dispatch(setCalculated({\n        mined: mined,\n        remainingTime: remainingTime,\n        progress: progress,\n        canClaim: canClaim,\n        canUpgrade: canUpgrade\n      }));\n    }\n  }, [waiting, mined, remainingTime, progress, canClaim, canUpgrade, dispatch]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 190,\n    columnNumber: 5\n  }, this);\n};\n_s(CalculateNums, \"OpjGcguyTzSavvAPKqSZ4boFre4=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = CalculateNums;\nexport default CalculateNums;\nvar _c;\n$RefreshReg$(_c, \"CalculateNums\");","map":{"version":3,"names":["React","useState","useEffect","selectUser","useDispatch","useSelector","setCalculated","jsxDEV","_jsxDEV","CalculateNums","_s","dispatch","user","waiting","setWaiting","mined","setMined","remainingTime","setRemainingTime","hours","minutes","seconds","progress","setProgress","canClaim","setCanClaim","MAX_MINE_RATE","calculateProgress","miningStartedTime","now","Date","totalMiningTime","elapsedTime","Math","min","max","calculateMinedValue","mineRate","round","minedValue","calculateRemainingTime","endTime","floor","addPrecise","a","b","parseFloat","toFixed","getUpgradeStep","rate","pow","log10","getUpgradePrice","nextRate","getNextUpgradeRate","step","canUpgrade","balance","worker","updateFunction","updateProgress","currentProgress","updatedMinedValue","currentMinedValue","updateRemainingTime","timeLeft","updateMinedValue","isMining","workerCode","blob","Blob","type","Worker","URL","createObjectURL","onmessage","postMessage","terminate","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Samsung/OneDrive/Desktop/Mariano Crop Farm Frontend/marianocropfarmbot/src/components/CalculateNums.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { selectUser } from '../features/userSlice';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { setCalculated } from '../features/calculateSlice';\r\n\r\nconst CalculateNums = () => {\r\n    const dispatch = useDispatch();\r\n    const user = useSelector(selectUser);\r\n\r\n    const [waiting, setWaiting] = useState(true);\r\n    const [mined, setMined] = useState(0);\r\n    const [remainingTime, setRemainingTime] = useState({\r\n        hours: 6,\r\n        minutes: 0,\r\n        seconds: 0,\r\n    });\r\n    const [progress, setProgress] = useState(0);\r\n    const [canClaim, setCanClaim] = useState(false);\r\n\r\n    const MAX_MINE_RATE = 100.0;\r\n\r\n    const calculateProgress = (miningStartedTime) => {\r\n        if (!miningStartedTime) return 0;\r\n\r\n        const now = Date.now();\r\n        const totalMiningTime = 6 * 60 * 60 * 1000;\r\n        const elapsedTime = now - miningStartedTime;\r\n\r\n        if (elapsedTime >= totalMiningTime) {\r\n            setCanClaim(true);\r\n            return 100;\r\n        }\r\n\r\n        const progress = (elapsedTime / totalMiningTime) * 100;\r\n        return Math.min(Math.max(progress, 0), 100);\r\n    };\r\n\r\n    const calculateMinedValue = (miningStartedTime, mineRate) => {\r\n        if (!miningStartedTime || !mineRate) return 0;\r\n\r\n        const now = Date.now();\r\n        const totalMiningTime = 6 * 60 * 60 * 1000;\r\n        let elapsedTime = now - miningStartedTime;\r\n\r\n        elapsedTime = Math.round(elapsedTime / 1000) * 1000;\r\n\r\n        if (elapsedTime >= totalMiningTime) {\r\n            return mineRate * (totalMiningTime / 1000);\r\n        }\r\n\r\n        const minedValue = mineRate * (elapsedTime / 1000);\r\n\r\n        return Math.round(minedValue * 1000) / 1000;\r\n    };\r\n\r\n    const calculateRemainingTime = (miningStartedTime) => {\r\n        if (!miningStartedTime) {\r\n            return { hours: 6, minutes: 0, seconds: 0 };\r\n        }\r\n\r\n        const now = Date.now();\r\n        const totalMiningTime = 6 * 60 * 60 * 1000;\r\n        const endTime = miningStartedTime + totalMiningTime;\r\n        const remainingTime = Math.max(endTime - now, 0);\r\n\r\n        if (remainingTime === 0) {\r\n            return { hours: 0, minutes: 0, seconds: 0 };\r\n        }\r\n\r\n        const hours = Math.floor(remainingTime / (60 * 60 * 1000));\r\n        const minutes = Math.floor((remainingTime % (60 * 60 * 1000)) / (60 * 1000));\r\n        const seconds = Math.floor((remainingTime % (60 * 1000)) / 1000);\r\n\r\n        return { hours, minutes, seconds };\r\n    };\r\n\r\n    const addPrecise = (a, b) => {\r\n        return parseFloat((a + b).toFixed(3));\r\n    };\r\n\r\n    const getUpgradeStep = (rate) => {\r\n        if (rate < 0.01) return 0.001;\r\n        if (rate < 0.1) return 0.01;\r\n        if (rate < 1) return 0.1;\r\n        return Math.pow(10, Math.floor(Math.log10(rate)));\r\n    };\r\n\r\n    const getUpgradePrice = (nextRate) => {\r\n        return nextRate * 100000;\r\n    };\r\n\r\n    const getNextUpgradeRate = () => {\r\n        const step = getUpgradeStep(user.mineRate);\r\n        return Math.min(addPrecise(user.mineRate, step), MAX_MINE_RATE);\r\n    };\r\n\r\n    const canUpgrade = \r\n        user.balance >= getUpgradePrice(getNextUpgradeRate()) &&\r\n        user.mineRate < MAX_MINE_RATE;\r\n\r\n        useEffect(() => {\r\n            let worker = null;\r\n\r\n            const updateFunction = () => {\r\n                const updateProgress = () => {\r\n                    const currentProgress = calculateProgress(user.miningStartedTime);\r\n                    setProgress(currentProgress);\r\n                };\r\n\r\n                const updatedMinedValue = () => {\r\n                    const currentMinedValue = calculateMinedValue(\r\n                        user.miningStartedTime,\r\n                        user.mineRate\r\n                    );\r\n                    setMined(currentMinedValue);\r\n                    setWaiting(false);\r\n                };\r\n\r\n                const updateRemainingTime = () => {\r\n                    const timeLeft = calculateRemainingTime(user.miningStartedTime);\r\n                    setRemainingTime(timeLeft);\r\n\r\n                    if (\r\n                        timeLeft.hours === 0 && \r\n                        timeLeft.minutes === 0 &&\r\n                        timeLeft.seconds === 0\r\n                    ) {\r\n                        setRemainingTime({ hours: 0, minutes: 0, seconds: 0 });\r\n                    }\r\n                };\r\n\r\n                updateProgress();\r\n                updateMinedValue();\r\n                updateRemainingTime();\r\n            };\r\n\r\n            if (user.isMining && user.miningStartedTime) {\r\n                const workerCode = `\r\n                    let interval = null\r\n                    self.onmessage = function(e) {\r\n                        if (e.data === 'start) {\r\n                            interval = setInterval(() => {\r\n                                self.postMessage('tick');\r\n                            }, 1000);\r\n                        } else if (e.data === 'stop') {\r\n                            clearInterval(interval);\r\n                        }\r\n                    };\r\n                `;\r\n\r\n                const blob = new Blob([workerCode], { type: \"application/javascript\"});\r\n                worker = new Worker(URL,createObjectURL(blob));\r\n\r\n                worker.onmessage = updateFunction;\r\n                worker.postMessage(\"start\");\r\n                } else {\r\n                    setProgress(0);\r\n                    setMined(0);\r\n                    setRemainingTime({ hours: 6, minutes: 0, seconds: 0 });\r\n                    setCanClaim(false);\r\n                    setWaiting(false);\r\n                }\r\n\r\n                return () => {\r\n                    if (worker) {\r\n                        worker.postMessage(\"stop\");\r\n                        worker.terminate();\r\n                    }\r\n                };\r\n            }, [user.isMining, user.miningStartedTime, user.mineRate\r\n        ]\r\n    );\r\n\r\n    useEffect(() => {\r\n        if (!waiting) {\r\n            dispatch(\r\n                setCalculated({\r\n                    mined: mined,\r\n                    remainingTime: remainingTime,\r\n                    progress: progress,\r\n                    canClaim: canClaim,\r\n                    canUpgrade: canUpgrade,\r\n                })\r\n            );\r\n        }\r\n    }, [waiting, mined, remainingTime, progress, canClaim, canUpgrade, dispatch]);\r\n        \r\n\r\n  return (\r\n    <div></div>\r\n  )\r\n}\r\n\r\nexport default CalculateNums;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}